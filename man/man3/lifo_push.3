.\"
.\" lifo_push.3
.\"
.\" Manpage for lifo_push of Undefined-C library
.\"
.\" By: Juillard Jean-Baptiste (jbjuillard@gmail.com)
.\"
.\" Created: 2017/03/09 by Juillard Jean-Baptiste
.\" Updated: 2018/03/12 by Juillard Jean-Baptiste
.\"
.\" This file is a part free software; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 3, or
.\" (at your option) any later version.
.\"
.\" There is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
.\" General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License
.\" along with this program; see the file LICENSE.  If not, write to
.\" the Free Software Foundation, Inc., 51 Franklin Street, Fifth
.\" Floor, Boston, MA 02110-1301, USA.
.\"

.TH LIFO_PUSH 3 "03/16/2017" "Version 0.0" "Manuel du programmeur Undefined-C"

.SH NAME
lifo_push \- Ajoute un element au sommet de la pile

.SH SYNOPSYS
.B #include <stdlst.h>

.BI "lifo_t	*lifo_push(lifo_t " **stk ", void " *key ", size_t " size );

.SH DESCRIPTION

.B lifo_push
.RI "ajoute un element contenant une valeur cle " key " d'une taille de " size
.RI "octets au sommet de la pile " stk .
.RB "Ce nouvel element est alloue avec " malloc "(3), les piles doivent donc"
.RB "etre libere soit avec " lifo_pop " soit avec " lifo_purge " ou soit avec"
.BR free (3).
.IR stk ", " key " et " size " doivent etre des arguments valides tels qu'ils"
.RB "sont decrit dans la section " NOTES .
.BR errno "(3) est toujours modifier par " lifo_push ", voir la section"
.BR ERREURS .

.SH VALEUR DE RETOUR
.B lifo_push
.R retourne un pointeur sur le nouveau sommet de pile (e.i.: l'element ajoute).
.RB "En cas d'erreur, " NULL " est retourner et " errno "(3) est definit."

.SH ERREURS
.TP
.B 0
.RB "L'operation s'est termine sans erreur, " errno "(3) est mis a " 0 .
.TP
.B EINVAL
.RB "Si la fonction a ete appele avec au moins un argument invalide, " errno (3)
.RB "est mis a " EINVAL .
.TP
.B ENOMEM
.RB "Si une erreur d'allocation survient lors d'un appel a " malloc "(3),"
.BR errno "(3) devrait etre mis a " ENOMEM " par " malloc (3).

.SH NOTES
.RI "- " stk " doit etre different de"
.RB (( lifo_t " **)(" NULL )),
.RI " notez que " *stk
.RB "= ((" lifo_t " *)(" NULL ))
.R est valide et designe une pile vide.

.RI "- " key " doit pointer un objet valide"
.RB "(!= " NULL ).

.RI "- " size " doit etre different"
.RB "de " 0 " et inferieur ou egal a " SIZE_MAX
.RI "(definit dans " /usr/include/stdint.h ).

.SH BUGS
.R "Aucun bug signale."

.SH EXEMPLES

.TP
.RB "Exemples avec une pile d'entier:"


#include <stdlib.h>
.br
#include <errno.h>
.br
#include <stdlst.h>
.br
#include <stdio.h>

static void	_ofree(void *k, size_t z)
.br
{
.br
	if (!k || z != sizeof(int))
.br
	{
.br
		errno = EINVAL;
.br
		return ;
.br
	}
.br
	free(k);
.br
}

int			main(void)
.br
{
.br
	lifo_t	*stk;
.br
	void		*tmp;
.br
	int		i;

	/*
.br
	** Creation d'une pile d'entier
.br
	*/
.br
	stk = (lifo_t *)(NULL);
.br
	i = 0;
.br
	while (i < 10)
.br
	{
.br
		if ((tmp = malloc(sizeof(int)) )== NULL)
.br
		{
.br
			/*
.br
			** En cas d'erreur on vide la pile
.br
			*/
.br
			lifo_purge(&stk, &_ofree);
.br
			return (1);
.br
		}
.br
		*((int *)(tmp)) = i;
.br
		if (lifo_push(&stk, tmp, sizeof(int)) == (lifo_t *)(NULL))
.br
		{
.br
			free(tmp);
.br
			lifo_purge(&stk, &_ofree);
.br
			return (1);
.br
		}
.br
		i++;
.br
	}

	/*
.br
	** Utilisation de la pile
.br
	*/
.br
	while (stk)
.br
	{
.br
		if ((tmp = lifo_pop(&stk)) == NULL)
.br
		{
.br
			lifo_purge(&stk, &_ofree);
.br
			return (1);
.br
		}
.br
		printf("%i\\n", *((int *)(tmp)));
.br
		free(tmp);
.br
	}


	return (0);
.br
}

.TP
.RI "Un exemple d'implentation de l'algorithme shunting-yard utilisant les piles se trouve dans " examples/shunting-yard/ .

.SH AUTEUR
.R Juillard Jean-Baptiste

.SH VOIR AUSSI
.BR lifo_pop "(3), " lifo_purge "(3), " lifo_map "(3),"
.BR stdlst "(3), " slst "(3), " mlifo (3)
