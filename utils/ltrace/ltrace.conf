;
; ltrace.conf
;
; ltrace configuration file of Undefined-C
;
; By: Juillard Jean-Baptiste (jbjuillard@gmail.com)
;
; Created: 2018/01/29 by Juillard Jean-Baptiste
; Updated: 2018/03/12 by Juillard Jean-Baptiste
;
; This file is a part free software; you can redistribute it and/or
; modify it under the terms of the GNU General Public License as
; published by the Free Software Foundation; either version 3, or
; (at your option) any later version.
;
; There is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
; General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program; see the file LICENSE.  If not, write to
; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
; Floor, Boston, MA 02110-1301, USA.
;

; Define function pointer
typedef funcptr = addr;

; stdlst.h
typedef slst = struct;
typedef slst = struct(void*, ulong, slst*);
typedef mslst = struct;
typedef mslst = struct(void**, ulong*, mslst*);
typedef sslst = slst;
typedef msslst = mslst;
typedef lifo = slst;
typedef mlifo = mslst;
typedef sclst = slst;
typedef msclst = mslst;
typedef scslst = slst;
typedef mscslst = mslst;
typedef fifo = slst;
typedef mfifo = mslst;

; slst
slst *slst_newelm(void);
void slst_delelm(slst**, funcptr);
void slst_purge(slst**, void*);
int slst_isempty(slst**);
ulong slst_len(slst**);
slst *slst_previous(slst**, slst*);
slst *slst_next(slst**, slst*);
mslst *slst_head(slst**, ulong);
mslst *slst_tail(slst**, ulong);
slst *slst_put(slst**, void*, ulong);
slst *slst_putn(slst**, void*, ulong, ulong);
slst *slst_get(slst**);
slst *slst_getn(slst**, ulong);
void slst_del(slst**, funcptr);
void slst_deln(slst**, ulong, funcptr);
void slst_delp(slst**, slst*, funcptr);
slst *slst_nsrt(slst**, slst*);
slst *slst_nsrtn(slst**, slst*, ulong);
slst *slst_nsrtp(slst**, slst*, slst*);
slst *slst_nsrtk(slst**, slst*, void*, ulong, funcptr);
slst *slst_xtrc(slst**);
slst *slst_xtrcn(slst**, ulong);
slst *slst_xtrcp(slst**, slst*);
slst *slst_xtrck(slst**, void*, ulong, funcptr);
slst *slst_rch(slst**, void*, ulong, funcptr);
slst *slst_rrch(slst**, void*, ulong, funcptr);
ulong slst_xrch(slst**, void*, ulong, mslst**, funcptr);
ulong slst_rxrch(slst**, void*, ulong, mslst**, funcptr);
int slst_cmp(slst**, slst**, slst**, slst**, funcptr);
int slst_rcmp(slst**, slst**, slst**, slst**, funcptr);
ulong slst_diff(slst**, mslst**, slst**, mslst**, funcptr);
ulong slst_rdiff(slst**, mslst**, slst**, mslst**, funcptr);
slst *slst_cpy(slst**, funcptr);
slst *slst_rcpy(slst**, funcptr);
slst *slst_rev(slst**);
slst *slst_cat(slst**, slst**);
slst *slst_cut(slst**);
slst *slst_cutn(slst**, ulong);
slst *slst_cutp(slst**, slst*);
slst *slst_cutk(slst**, void*,  ulong, funcptr);
int slst_apply(slst**, funcptr);
ulong slst_keyslen(slst**);
void *slst_keysdup(slst**, ulong*);
slst *slst_slctsrt(slst**, funcptr);
slst *slst_slctrsrt(slst**, funcptr);
slst *slst_nsrtsrt(slst**, funcptr);
slst *slst_nsrtrsrt(slst**, funcptr);
slst *slst_bbsrt(slst**, funcptr);
slst *slst_bbrsrt(slst**, funcptr);
slst *slst_cmbsrt(slst**, funcptr);
slst *slst_cmbrsrt(slst**, funcptr);
slst *slst_mrgsrt(slst**, funcptr);
slst *slst_mrgrsrt(slst**, funcptr);
slst *slst_qcksrt(slst**, funcptr);
slst *slst_qckrsrt(slst**, funcptr);
slst *slst_intsrt(slst**, funcptr);
slst *slst_intrsrt(slst**, funcptr);
slst *slst_shsrt(slst**, funcptr);
slst *slst_shrsrt(slst**, funcptr);
slst *slst_heapsrt(slst**, funcptr);
slst *slst_heaprsrt(slst**, funcptr);
int slst_random(slst**, uint);
lifo *slst2lifo(slst**);
sslst *slst2sslst(slst**);
sclst *slst2sclst(slst**);
fifo *slst2fifo(slst**);
scslst *slst2scslst(slst**);
mslst *slst_map(slst**);

; mslst
void mslst_purge(mslst**);

; lifo
lifo *lifo_push(lifo**, void*, ulong);
void *lifo_pop(lifo**);
void lifo_purge(lifo**, funcptr);
mlifo *lifo_map(lifo**);

; mlifo
mlifo *mlifo_push(mlifo**, void**, ulong*);
void **mlifo_pop(mlifo**);
void mlifo_purge(mlifo**);

; sclst
sclst *sclst_newelm(void);
void sclst_delelm(sclst*, funcptr);
int sclst_isempty(sclst**);
ulong sclst_len(sclst**);
sclst *sclst_previous(sclst**, sclst*);
sclst *sclst_next(sclst**, sclst*);
msclst *sclst_head(sclst**, ulong);
msclst *sclst_tail(sclst**, ulong);
sclst *sclst_put(sclst**, void*, ulong);
sclst *sclst_put_front(sclst**, void*, ulong);
sclst *sclst_put_back(sclst**, void*, ulong);
sclst *sclst_putn(sclst**, void*, ulong, ulong);
void *sclst_get(sclst**);
void *sclst_get_front(sclst**);
void *sclst_get_back(sclst**);
void *sclst_getn(sclst**, ulong);
void sclst_purge(sclst**, funcptr);

msclst *sclst_map(sclst**);

; msclst
void msclst_purge(msclst**);

; fifo
fifo *fifo_push(fifo**, void*, ulong);
void *fifo_pop(fifo**);
void fifo_purge(fifo**, funcptr);
mfifo *fifo_map(fifo**);

; mfifo
mfifo *mfifo_push(mfifo**, void**, ulong*);
void **mfifo_pop(mfifo**);
void mfifo_purge(mfifo**);
